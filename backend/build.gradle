plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.mtvs'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Version management
ext {
    jwtVersion = '0.11.5'
    nettyVersion = '4.1.108.Final'
    modelMapperVersion = '3.2.0'
    springDotenvVersion = '4.0.0'
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    // Database
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.9.8'
    
    // Security & JWT
    implementation 'org.springframework.security:spring-security-crypto'
    implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    
    // Networking (MacOS DNS resolver fix)
    implementation "io.netty:netty-resolver-dns-native-macos:${nettyVersion}:osx-aarch_64"
    
    // Utilities
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"
    implementation "me.paulschwarz:spring-dotenv:${springDotenvVersion}"
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
}
